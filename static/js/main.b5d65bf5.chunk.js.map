{"version":3,"sources":["components/Header.js","components/ListagemItem.js","components/Listagem.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","io","ListagemItem","props","aluno","nome","ra","idade","NomesAlunos","Listagem","components_Header","map","components_ListagemItem","key","App","components_Listagem","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAiBeA,EAdA,kBACfC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,KAA8BH,EAAAC,EAAAC,cAACE,EAAA,EAAD,MAA9B,MADH,KAEGJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,WAGHH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAOC,UAAU,cAAaH,EAAAC,EAAAC,cAACE,EAAA,EAAD,OAC9BJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAASH,EAAAC,EAAAC,cAACE,EAAA,EAAD,UCDlBC,EATM,SAACC,GAClB,IAAMC,EAAQD,EAAMC,MACpB,OACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACnBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQI,EAAMC,MAC3BR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASI,EAAME,GAA5B,KAAkCF,EAAMG,MAAxC,YCCMC,EAAc,CAChB,CAAEH,KAAM,YAAaC,GAAI,WAAYC,MAAM,IAC3C,CAAEF,KAAM,YAAaC,GAAI,UAAWC,MAAO,IAC3C,CAAEF,KAAM,qBAAsBC,GAAI,SAAUC,MAAO,IACnD,CAAEF,KAAM,YAAaC,GAAI,UAAWC,MAAO,KAYhCE,EAVE,kBACbZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAAA,YACKS,EAAYG,IACT,SAACP,GAAD,OAAWP,EAAAC,EAAAC,cAACa,EAAD,CAAcC,IAAKT,EAAME,GAAIF,MAAOA,SCYhDU,mLAzBX,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAD,cAJUC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b5d65bf5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IoIosAddCircle, IoIosAdd, IoIosSearch} from \"react-icons/io\";\r\n\r\nconst Header = () => \r\n<header>\r\n    <div className=\"AppBar\">\r\n       <p className=\"buttonSearch\">  <IoIosSearch />  </p>  {/*colocar os caras flutuantes antes*/}\r\n       <h1 className=\"Title\">Alunos</h1>\r\n    </div>\r\n\r\n    <div className=\"buttonAdd\">\r\n        <span  className=\"background\"><IoIosAddCircle/></span>\r\n        <span className=\"symbol\"><IoIosAdd/></span>\r\n    </div>\r\n\r\n</header>\r\n\r\nexport default Header;","import React from 'react';\r\n/*vamos receber essa variavel aluno como props*/\r\nconst ListagemItem = (props) => {\r\n    const aluno = props.aluno;\r\n    return (\r\n    <div className=\"Aluno\">\r\n<p className=\"Nome\">{aluno.nome}</p>\r\n<p className=\"Dados\">{aluno.ra}, {aluno.idade} anos </p></div>\r\n    );\r\n}\r\n\r\nexport default ListagemItem;","import React from 'react';\r\nimport Header from './Header';\r\nimport ListagemItem from './ListagemItem';\r\n\r\n//só precisa importar component se for usar classe\r\n//só precisa usar classe quando tiver lifecycle ou state\r\n//quando envolve html em react usa ()\r\n//nao se usa br para layout\r\nconst NomesAlunos = [\r\n    { nome: 'Amorzinho', ra: 3485858585, idade:44 },\r\n    { nome: 'Bebezinho', ra: 485858586, idade: 45 },\r\n    { nome: 'Docinho de Abobora', ra: 85858587, idade: 26 },\r\n    { nome: 'Jujubinha', ra: 485858588, idade: 47 },\r\n]\r\nconst Listagem = () => (\r\n    <div>\r\n        <Header/>\r\n        <main>\r\n            {NomesAlunos.map (\r\n                (aluno) => <ListagemItem key={aluno.ra} aluno={aluno}/>\r\n            )}\r\n        </main>\r\n    </div>\r\n)\r\nexport default Listagem;\r\n","import React, { Component } from 'react';\nimport Listagem from './Listagem';\n// import './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Listagem  />\n\n      </div>\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}